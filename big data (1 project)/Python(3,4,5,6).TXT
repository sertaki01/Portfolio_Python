Θέμα 3 (2)

# διαχείριση φακέλου μέσω της python. 
import os

# Λάβετε τον τρέχοντα κατάλογο εργασίας.
current_directory = os.getcwd()

print("Current Directory:", current_directory)

# Για να ψάχνει απο άλλο φακελό τα αρχεία που θέλουμε να τραβήξει.
new_directory = 'C:\\Users\\admin\\OneDrive\\Υπολογιστής\\big data (1 project)'

os.chdir(new_directory)

# Για να επιβεβαιώσουμε οτι όντως άλλαξε το path που τραβάει αρχεία.
current_directory = os.getcwd()

print("New Current Directory:", current_directory)

# Πακέτο για να διαβάζουμε αρχεία csv.
import pandas as pd

# Διαβάζουμε ενα αρχείο csv σε ένα dataframe.
WineData = pd.read_csv("winequality-white.csv", header=0, sep=";", engine='python')

# Του λέμε να μας δείξει τις πρώτες 5 γραμμές του πίνακα δεδομένων.
print(WineData.head())

# Του λέμε να μας δείξει τις τελευταίες 5 γραμμές του πίνακα δεδομένων.
print(WineData.tail())

# Έλεγχος ελλειπούσων τιμών στα δεδομένα μας.
missing_values = WineData.isna().sum()

# Θα δείξει για κάθε μεταβλητή πόσες τιμές λείπουν.
print(missing_values)

# Βρίσκει τον δείκτη της στήλης όπου βρίσκεται η μεταβλητή 'quality'.
column_index = WineData.columns.get_loc('quality')

# Εδω του λεμε να μας το εμφανισει την στηλη που βρίσκει.
print("Η μεταβλητή 'quality' βρίσκεται στη στήλη με δείκτη:", column_index)

# Εδώ διώχνουμε τη μεταβλητή 'quality' διότι είναι διατακτική για να μπορούμε να κάνουμε pca.
WineData=WineData.drop('quality', axis=1)

#Του ζητάμε να τυπώσει τις 5 πρώτες γραμμές για να δούμε εαν εκτελέστηκε σωστά η προηγούμενη εντολή.
print(WineData.head())

# Αυτές η δύο γραμμές χρειάζοντα για να μπορούμε να τρέξουμε την python.
from sklearn import decomposition

from sklearn.decomposition import PCA

# Για να μπορέσουμε να χρησιμοποιήσουμε διανύσματα.
import numpy as np

# Τρέχουμε την συνάρτηση pca και του λέμε πόσα principal components θελουμε.
pca = decomposition.PCA(n_components=2)

# Εδώ τρέχουμε το pca στον πίνακα δεδομένων που έχουμε κάνει import. 
pca.fit(WineData)

#Για να μετατρέψoυμε τα δεδομένα του συνόλου δεδομένων WineData στο νέο σύστημα συντεταγμένων που καθορίστηκε από τα δύο ιδιοδιανύσματα που προέκυψαν από το (PCA).
transformedWineData = pca.transform(WineData)

# Εκτύπωση των ιδιοτιμών
print("Ιδιοτιμές:")
print(pca.explained_variance_)

# Εκτύπωση των ιδιοδιανυσμάτων
print("Ιδιοδιανύσματα:")
print(pca.components_)

# Εκτύπωση του ποσοστού της διακύμανσης που εξηγείται από κάθε κύρια συνιστώσα
print("Ποσοστό Διακύμανσης που Εξηγείται από κάθε Κύρια Συνιστώσα:")
print(pca.explained_variance_ratio_)


# Δημιουργία ενός DataFrame που περιέχει τις ιδιοτιμές, ιδιοδιανύσματα, ποσοστό της διακύμανσης που εξηγείται από κάθε κύρια συνιστώσα.
df = pd.DataFrame({'eigenvalues': pca.explained_variance_.round(3) ,'explained_variance_ratio': pca.explained_variance_ratio_.round(3)})

# Αποθηκεύστε το DataFrame σε ένα αρχείο CSV
df.to_csv('pca_results_subset.csv', index=False)



# Θέμα 4 (I)

# Για να μπορέσουμε να χρησιμοποιήσουμε διανύσματα.
import numpy as np

# παρέχει πολλές μαθηματικές λειτουργίες που θα χρειαστούμε όπως sqrt. 
import math

# Δημιουργία συνάρτησης που υπολογίζει την Ευκλείδεια απόσταση των δύο διανυσμάτων διαστάσεων n.
def euclideanDistance(vector1, vector2,do_print=True):
    distance=math.sqrt(sum((np.array(vector1) - np.array(vector2))**2))
    if do_print:
        print("Ευκλείδεια απόσταση:", distance)
    return distance
    
# Δημιουργία διανυσμάτων με στοιχεία [n].
v1=np.array([1,2,3,4,5,6])
v2=np.array([1,2,3,4,5,6])
v3=np.array([-0.5, 1, 7.3, 7, 9.4, -8.2, 9, -6, -6.3])
v4=np.array([0.5, -1, -7.3, -7, -9.4, 8.2, -9, 6, 6.3])
v5=np.array([-0.5, 1, 7.3, 7, 9.4, -8.2])
v6=np.array([1.25, 9.02, -7.3, -7, 5, 1.3])
v7=np.array([0, 0, 0.2])
v8=np.array([0.2, 0.2, 0])

# Υπολογίζουμε την ευκλείδια απόσταση.
euclideanDistance(v1,v2)
euclideanDistance(v3,v4)
euclideanDistance(v5,v6)
euclideanDistance(v7,v8)


# Θέμα (II)

def find_max_and_position(a, b, c, d):
    numbers = [a, b, c, d]
    max_value = max(numbers)
    max_index = numbers.index(max_value)+1
    return max_value, max_index

# Δημιουργία διανυσμάτων με στοιχεία [n].
v1=np.array([25000,14,7])
v2=np.array([42000,17,9])
v3=np.array([55000,22,5])
v4=np.array([27000,13,11])
v5=np.array([58000,21,13])

# Υπολογίζουμε την ευκλείδια απόσταση.
d1=euclideanDistance(v5,v1,do_print=False)
d2=euclideanDistance(v5,v2,do_print=False)
d3=euclideanDistance(v5,v3,do_print=False)
d4=euclideanDistance(v5,v4,do_print=False)

# Μετατρέπουμε την ευκλείδια απόσταση σε μέτρο ομοιότητας.
s1=1/(1+d1)
s2=1/(1+d2)
s3=1/(1+d3)
s4=1/(1+d4)

result, position = find_max_and_position(s1,s2,s3,s4)

print("Ο χρήστης με την μεγαλύτερη ομοιότητα:", result)

print("Είναι το προφίλ του χρήστη με κωδικό:", position)



# Θέμα 5

# Για να μπορέσουμε να χρησιμοποιήσουμε διανύσματα.
import numpy as np

# παρέχει πολλές μαθηματικές λειτουργίες που θα χρειαστούμε όπως sqrt. 
import math

# Δημιουργία συνάρτησης που υπολογίζει την ομοιότητα συνημιτόνου των δύο διανυσμάτων διαστάσεων n.
def cosineSimilarity(vector1, vector2):
     dot_product= sum(vector1*vector2)
     norm_vector1= math.sqrt(sum(vector1**2))
     norm_vector2= math.sqrt(sum(vector2**2))
     similarity= dot_product/(norm_vector1*norm_vector2)
     return similarity

# Δημιουργία διανυσμάτων με στοιχεία [n].
v1=np.array([9.32, -8.3, 0.2])
v2=np.array([-5.3, 8.2, 7])
v3=np.array([6.5, 1.3, 0.3, 16, 2.4, -5.2, 2, -6, -6.3])
v4=np.array([0.5, -1, -7.3, -7, -9.4, 8.2, -9, 6, 6.3])
v5=np.array([-0.5, 1, 7.3, 7, 9.4, -8.2])
v6=np.array([1.25, 9.02, -7.3, -7, 15, 12.3])
v7=np.array([2, 8, 5.2])
v8=np.array([2, 8, 5.2])

# Υπολογίζουμε την ομοιότητα συνημιτόνου.
similarity1=cosineSimilarity(v1,v2)
similarity2=cosineSimilarity(v3,v4)
similarity3=cosineSimilarity(v5,v6)
similarity4=cosineSimilarity(v7,v8)

# εμφανίζει στην οθόνη την ομοιότητα συνημιτόνου μεταξύ δυο διανυσμάτων για κάθε ζευγάρι.
print("Cosine Similarity:", round(similarity1,ndigits=4))
print("Cosine Similarity:", round(similarity2,ndigits=4))
print("Cosine Similarity:", round(similarity3,ndigits=4))
print("Cosine Similarity:", round(similarity4,ndigits=4))



# Θέμα 6

# Για να μπορέσουμε να χρησιμοποιήσουμε διανύσματα.
import numpy as np

# παρέχει πολλές μαθηματικές λειτουργίες που θα χρειαστούμε όπως sqrt. 
import math

# Ορίζουμε τα διανύσματα που θα χρησιμοποιήσουμε
v1 = ["Green", "Potato", "Ford"]
v2 = ["Tyrian purple", "Pasta", "Opel"]
v3 = ["Eagle", "Ronaldo", "Real madrid", "Prussian blue", "Michael Bay"]
v4 = ["Eagle", "Ronaldo", "Real madrid", "Prussian blue", "Michael Bay"]
v5 = ["Werner Herzog", "Aquirre, the wrath of God", "Audi", "Spanish red"]
v6 = ["Martin Scorsese", "Taxi driver", "Toyota", "Spanish red"]



# Συνάρτηση με όνομα nominalDistance, η οποία Υπολογίζει την απόσταση με βάση ενός δείκτη που κυμαίνεται απο το 0 εώς το 1. Όσο αυξάνεται ο δείκτης τόσο μεγαλύτερη απόσταση έχουν τα δυο διανύσματα μεταξύ τους.
def nominalDistance(vec1, vec2):
    distance=0
    for i in range (len(vec1)):
        if vec1[i] != vec2[i]:
            distance+=1
    index = distance / len(vec1)
    return index

# Καλεί τη συνάρτηση nominalDistance και υπολογίζει την απόσταση μεταξύ δυο διανυσμάτων.
index1 = nominalDistance(v1, v2)
index2 = nominalDistance(v3, v4)
index3 = nominalDistance(v5, v6)


print("distance 1:", index1)
print("distance 2:", index2)
print("distance 3:", index3)







