#Θέμα 3 πρώτο ερώτημα.

#Ορίζεται ο φάκελος που αποθηκεύει και αναζητά τα αρχεία.
setwd("C:\\Users\\admin\\OneDrive\\Υπολογιστής\\big data (1 project)")

#διαγράφει όλες τις μεταβλητές που βρίσκονται στο περιβάλλον εργασίας.
rm(list = ls())

#διαγράφει όλα τα διαγράμματα που έχουν δημιουργηθεί.
graphics.off()

#Για να προσθέση την βιβλιοθήκη που περιέχει τα δεδομένα που θέλω.
library(MASS)

# Συνάρτηση ή οποία τραβάει τα δεδομένα που θέλω απο την βιβλιοθήκη MASS.
data(Cars93)

# 6 πρώτες παρατηρήσεις απο το πλαίσιο δεδομένων.
head(Cars93)

# 6 τελευταίες παρατηρήσεις απο το πλαίσιο δεδομένων.
tail(Cars93, 6)

# Για να δούμε τι τύπου δεδομένων είναι κάθε μεταβλητή που διαβάσαμε από το αρχείο.
str(Cars93)

# Μετατροπή της μεταβλητής Cylinders από factor σε int.
Cars93$Cylinders<- as.integer(Cars93$Cylinders)

#μετατρέπουμε τα δεδομένα μας ώστε να είναι μόνο αριθμητικά
numeric_data<-Cars93[sapply(Cars93, is.numeric)]

#αφαιρούμε τα στοιχεία που απουσιάζουν.
numeric_data<-na.omit(numeric_data)

#Εμφανίζει τον νέο πίνακα με μόνο αριθμητικά δεδομένα
print(numeric_data)

# Εκτελούμε μια ανάλυση Κύριων Συνιστωσών (PCA) χρησιμοποιώντας τον πίνακα συνδιακυμάνσεων.
library(stats)
covariance_matrix <- cov(numeric_data)
pca_result <- prcomp(covariance_matrix)

#Ιδιοτιμές (Eigenvalues).
eigenvalues <- pca_result$sdev^2
print(eigenvalues)

#Ιδιοδιανύσματα (Eigenvectors).
eigenvectors <- pca_result$rotation
print(eigenvectors)

#Ποσοστό εξήγησης της διακύμανσης.
variance_explained <- (eigenvalues / sum(eigenvalues)) * 100
print(variance_explained)

#Show the structure of a data set
str(eigenvalues)
str(variance_explained)

# Δημιουργούμε ένα DataFrame με τις ιδιοτιμές.
eigenvalues_df <- data.frame("Eigenvalues" = round(eigenvalues[1:2],3))

# Δημιουργούμε ένα DataFrame με το ποσοστό εξήγησης της διακύμανσης.
variance_explained_df <- data.frame("Variance_Explained" = round(variance_explained[1:2],3))

# Συνδυάζει τα DataFrames.
pca_results_df <- data.frame(eigenvalues_df,variance_explained_df)

# Θέτει labels στις γραμμές του DataFrame.
rownames(pca_results_df) <- c("pc1", "pc2")

# Αποθηκεύη το DataFrame ως αρχείο CSV.
write.csv((pca_results_df), file = "pca_results.csv")




# Θέμα 4 (I)

# Ορίζεται ο φάκελος που αποθηκεύει και αναζητά τα αρχεία.
setwd("C:\\Users\\admin\\OneDrive\\Υπολογιστής\\big data (1 project)")

# Διαγράφει όλες τις μεταβλητές που βρίσκονται στο περιβάλλον εργασίας.
rm(list = ls())

# Διαγράφει όλα τα διαγράμματα που έχουν δημιουργηθεί.
graphics.off()

# Εδώ θα ορίσουμε τα διανύσματα που θα χρησιμοποιήσουμε.
vector1 <- c(1, 2, 3, 4, 5, 6)
vector2 <- c(1, 2, 3, 4, 5, 6)
vector3 <- c(-0.5, 1, 7.3, 7, 9.4, -8.2, 9, -6, -6.3)
vector4 <- c(0.5, -1, -7.3, -7, -9.4, 8.2, -9, 6, 6.3)
vector5 <- c(-0.5, 1, 7.3, 7, 9.4, -8.2)
vector6 <- c(1.25, 9.02, -7.3, -7, 5, 1.3)
vector7 <- c(0, 0, 0.2)
vector8 <- c(0.2, 0.2, 0) 

# Ορισμός της συνάρτησης euclideanDistance.
euclideanDistance <- function(vec1, vec2) 
 distance <- sqrt(sum((vec1-vec2)^2))

# Καλεί τη συνάρτηση euclideanDistance και υπολογίζει την ευκλείδια απόσταση.
distance_1 <- euclideanDistance(vector1, vector2)
distance_2 <- euclideanDistance(vector3, vector4)
distance_3 <- euclideanDistance(vector5, vector6)
distance_4 <- euclideanDistance(vector7, vector8)

# Εκτυπώνη την Ευκλείδεια απόσταση.
cat("Ευκλείδεια απόσταση:", distance_1, "\n")
cat("Ευκλείδεια απόσταση:", distance_2, "\n")
cat("Ευκλείδεια απόσταση:", distance_3, "\n")
cat("Ευκλείδεια απόσταση:", distance_4, "\n")



# Θέμα 4 (II)

# Διαγράφει όλες τις μεταβλητές που βρίσκονται στο περιβάλλον εργασίας.
rm(list = ls())

# Διαγράφει όλα τα διαγράμματα που έχουν δημιουργηθεί.
graphics.off()

# Εδώ θα ορίσουμε τα διανύσματα που θα χρησιμοποιήσουμε.
v1<- c(25000, 14, 7 )
v2<- c(42000, 17, 9 )
v3<- c(55000, 22, 5 )
v4<- c(27000, 13, 11 )
v5<- c(58000, 21, 13 )

# Ορισμός της συνάρτησης euclideanDistance.
euclideanDistance <- function(vec1, vec2) 
  distance <- sqrt(sum((vec1-vec2)^2))

# Καλεί τη συνάρτηση euclideanDistance και υπολογίζει την ευκλείδια απόσταση.
d1 <- euclideanDistance(v5, v1)
d2 <- euclideanDistance(v5, v2)
d3 <- euclideanDistance(v5, v3)
d4 <- euclideanDistance(v5, v4)

#Μετατροπή σε δείκτη ομοιότητας.
s1<-1/(1+d1)
s2<-1/(1+d2)
s3<-1/(1+d3)
s4<-1/(1+d4)

# Ορισμός συνάρτησης για εύρεση της μεγαλύτερης ομοιότητας.
findMaxDistanceWithProfile<- function(d1, d2, d3, d4) {
  distances <- c(d1, d2, d3, d4)
  max_dist <- max(distances)
  profile_code <- which.max(distances)
  cat("O μεγαλύτερΟς δείκτης ομοιότητας είναι:", max_dist, "\n")
  cat("Κωδικός προφίλ που μοιάζει περισσότερο με τον χρήστη με κωδικό 5 είναι ο χρήστης με κωδικό:",profile_code, "\n")
  return(max_dist)
}

# Καλούμε τη συνάρτηση με τους τέσσερις δείκτες ομοιότητας και θα μας βγάλει τον μεγαλύτερο.
max_dist <- findMaxDistanceWithProfile(s1, s2, s3, s4)



# Θέμα 5 

# Ορίζεται ο φάκελος που αποθηκεύει και αναζητά τα αρχεία.
setwd("C:\\Users\\admin\\OneDrive\\Υπολογιστής\\big data (1 project)")

# Διαγράφει όλες τις μεταβλητές που βρίσκονται στο περιβάλλον εργασίας.
rm(list = ls())

# Διαγράφει όλα τα διαγράμματα που έχουν δημιουργηθεί.
graphics.off()

# Εδώ θα ορίσουμε τα διανύσματα που θα χρησιμοποιήσουμε.
v1<- c(9.32, -8.3, 0.2)
v2<- c(-5.3, 8.2, 7)
v3<- c(6.5, 1.3, 0.3, 16, 2.4, -5.2, 2, -6, -6.3)
v4<- c(0.5, -1, -7.3, -7, -9.4, 8.2, -9, 6, 6.3)
v5<- c(-0.5, 1, 7.3, 7, 9.4, -8.2)
v6<- c(1.25, 9.02, -7.3, -7, 15, 12.3)
v7<- c(2, 8, 5.2)
v8<- c(2, 8, 5.2)

#Mία συνάρτηση με όνομα cosineSimilarity η οποία δέχεται ως είσοδο δύο διανύσματα και υπολογίζει  την ομοιότητα συνημιτόνου.
cosineSimilarity <- function(vector1, vector2) {
  dot_product<- sum(vector1*vector2)
  norm_vector1<- sqrt(sum(vector1^2))
  norm_vector2<- sqrt(sum(vector2^2))
  similarity<- dot_product/(norm_vector1*norm_vector2)
  return(similarity) }

# Καλεί τη συνάρτηση cosineSimilarity  και υπολογίζει την ομοιότητα συνημιτόνου.
similarity1<- cosineSimilarity(v1,v2)
similarity2<- cosineSimilarity(v3,v4)
similarity3<- cosineSimilarity(v5,v6)
similarity4<- cosineSimilarity(v7,v8)

# Εκτυπώνη την ομοιότητα συνημιτόνου των διανυσμάτων. 
cat("Cosine Similarity:",similarity1)
cat("Cosine Similarity:",similarity2)
cat("Cosine Similarity:",similarity3)
cat("Cosine Similarity:",similarity4)



# Θέμα 6 

# Ορίζεται ο φάκελος που αποθηκεύει και αναζητά τα αρχεία.
setwd("C:\\Users\\admin\\OneDrive\\Υπολογιστής\\big data (1 project)")

# Διαγράφει όλες τις μεταβλητές που βρίσκονται στο περιβάλλον εργασίας.
rm(list = ls())

# Διαγράφει όλα τα διαγράμματα που έχουν δημιουργηθεί.
graphics.off()

# Εδώ θα ορίσουμε τα διανύσματα που θα χρησιμοποιήσουμε.
v1<- c("Green", "Potato", "Ford")
v2<- c("Tyrian purple", "Pasta", "Opel")
v3<- c("Eagle", "Ronaldo", "Real madrid", "Prussian blue", "Michael Bay")
v4<- c("Eagle", "Ronaldo", "Real madrid", "Prussian blue", "Michael Bay")
v5<- c("Werner Herzog", "Aquirre, the wrath of God", "Audi", "Spanish red")
v6<- c("Martin Scorsese", "Taxi driver", "Toyota", "Spanish red")

# Συνάρτηση με όνομα nominalDistance, η οποία Υπολογίζει την απόσταση με βάση ενός δείκτη που κυμαίνεται απο το 0 εώς το 1. Όσο αυξάνεται ο δείκτης τόσο μεγαλύτερη απόσταση έχουν τα δυο διανύσματα μεταξύ τους.
nominalDistance<-function(vec1,vec2) {
  distance <- sum(vec1==vec2)
  index<- distance/length(vec1)
  return(index)
}

# Καλούμε τη συνάρτηση nominalDistance για τα διανύσματα και εκτυπώνουμε το αποτέλεσμα.
index1<-nominalDistance(v1,v2)
index2<-nominalDistance(v3,v4)
index3<-nominalDistance(v5,v6)

cat("distance 1:", index1 , "\n")
cat("distance 2:", index2 , "\n")
cat("distance 3:", index3 , "\n")


